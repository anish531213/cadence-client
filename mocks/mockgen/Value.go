// // Copyright (c) 2017-2020 Uber Technologies Inc.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/cadence/internal (interfaces: Value)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockValue) Get(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockValueMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValue)(nil).Get), arg0)
}

// HasValue mocks base method
func (m *MockValue) HasValue() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValue")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasValue indicates an expected call of HasValue
func (mr *MockValueMockRecorder) HasValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValue", reflect.TypeOf((*MockValue)(nil).HasValue))
}
