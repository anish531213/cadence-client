// // Copyright (c) 2017-2020 Uber Technologies Inc.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/cadence/internal (interfaces: Client)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	shared "go.uber.org/cadence/.gen/go/shared"
	internal "go.uber.org/cadence/internal"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CancelWorkflow mocks base method
func (m *MockClient) CancelWorkflow(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelWorkflow indicates an expected call of CancelWorkflow
func (mr *MockClientMockRecorder) CancelWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflow", reflect.TypeOf((*MockClient)(nil).CancelWorkflow), arg0, arg1, arg2)
}

// CompleteActivity mocks base method
func (m *MockClient) CompleteActivity(arg0 context.Context, arg1 []byte, arg2 interface{}, arg3 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteActivity", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteActivity indicates an expected call of CompleteActivity
func (mr *MockClientMockRecorder) CompleteActivity(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteActivity", reflect.TypeOf((*MockClient)(nil).CompleteActivity), arg0, arg1, arg2, arg3)
}

// CompleteActivityByID mocks base method
func (m *MockClient) CompleteActivityByID(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 interface{}, arg6 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteActivityByID", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteActivityByID indicates an expected call of CompleteActivityByID
func (mr *MockClientMockRecorder) CompleteActivityByID(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteActivityByID", reflect.TypeOf((*MockClient)(nil).CompleteActivityByID), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CountWorkflow mocks base method
func (m *MockClient) CountWorkflow(arg0 context.Context, arg1 *shared.CountWorkflowExecutionsRequest) (*shared.CountWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.CountWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWorkflow indicates an expected call of CountWorkflow
func (mr *MockClientMockRecorder) CountWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWorkflow", reflect.TypeOf((*MockClient)(nil).CountWorkflow), arg0, arg1)
}

// DescribeTaskList mocks base method
func (m *MockClient) DescribeTaskList(arg0 context.Context, arg1 string, arg2 shared.TaskListType) (*shared.DescribeTaskListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTaskList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*shared.DescribeTaskListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskList indicates an expected call of DescribeTaskList
func (mr *MockClientMockRecorder) DescribeTaskList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskList", reflect.TypeOf((*MockClient)(nil).DescribeTaskList), arg0, arg1, arg2)
}

// DescribeWorkflowExecution mocks base method
func (m *MockClient) DescribeWorkflowExecution(arg0 context.Context, arg1, arg2 string) (*shared.DescribeWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflowExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*shared.DescribeWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflowExecution indicates an expected call of DescribeWorkflowExecution
func (mr *MockClientMockRecorder) DescribeWorkflowExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflowExecution", reflect.TypeOf((*MockClient)(nil).DescribeWorkflowExecution), arg0, arg1, arg2)
}

// ExecuteWorkflow mocks base method
func (m *MockClient) ExecuteWorkflow(arg0 context.Context, arg1 internal.StartWorkflowOptions, arg2 interface{}, arg3 ...interface{}) (internal.WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWorkflow", varargs...)
	ret0, _ := ret[0].(internal.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWorkflow indicates an expected call of ExecuteWorkflow
func (mr *MockClientMockRecorder) ExecuteWorkflow(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWorkflow", reflect.TypeOf((*MockClient)(nil).ExecuteWorkflow), varargs...)
}

// GetSearchAttributes mocks base method
func (m *MockClient) GetSearchAttributes(arg0 context.Context) (*shared.GetSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAttributes", arg0)
	ret0, _ := ret[0].(*shared.GetSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchAttributes indicates an expected call of GetSearchAttributes
func (mr *MockClientMockRecorder) GetSearchAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAttributes", reflect.TypeOf((*MockClient)(nil).GetSearchAttributes), arg0)
}

// GetWorkflow mocks base method
func (m *MockClient) GetWorkflow(arg0 context.Context, arg1, arg2 string) internal.WorkflowRun {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(internal.WorkflowRun)
	return ret0
}

// GetWorkflow indicates an expected call of GetWorkflow
func (mr *MockClientMockRecorder) GetWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockClient)(nil).GetWorkflow), arg0, arg1, arg2)
}

// GetWorkflowHistory mocks base method
func (m *MockClient) GetWorkflowHistory(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 shared.HistoryEventFilterType) internal.HistoryEventIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowHistory", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(internal.HistoryEventIterator)
	return ret0
}

// GetWorkflowHistory indicates an expected call of GetWorkflowHistory
func (mr *MockClientMockRecorder) GetWorkflowHistory(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowHistory", reflect.TypeOf((*MockClient)(nil).GetWorkflowHistory), arg0, arg1, arg2, arg3, arg4)
}

// ListArchivedWorkflow mocks base method
func (m *MockClient) ListArchivedWorkflow(arg0 context.Context, arg1 *shared.ListArchivedWorkflowExecutionsRequest) (*shared.ListArchivedWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchivedWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.ListArchivedWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchivedWorkflow indicates an expected call of ListArchivedWorkflow
func (mr *MockClientMockRecorder) ListArchivedWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivedWorkflow", reflect.TypeOf((*MockClient)(nil).ListArchivedWorkflow), arg0, arg1)
}

// ListClosedWorkflow mocks base method
func (m *MockClient) ListClosedWorkflow(arg0 context.Context, arg1 *shared.ListClosedWorkflowExecutionsRequest) (*shared.ListClosedWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClosedWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.ListClosedWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClosedWorkflow indicates an expected call of ListClosedWorkflow
func (mr *MockClientMockRecorder) ListClosedWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClosedWorkflow", reflect.TypeOf((*MockClient)(nil).ListClosedWorkflow), arg0, arg1)
}

// ListOpenWorkflow mocks base method
func (m *MockClient) ListOpenWorkflow(arg0 context.Context, arg1 *shared.ListOpenWorkflowExecutionsRequest) (*shared.ListOpenWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.ListOpenWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenWorkflow indicates an expected call of ListOpenWorkflow
func (mr *MockClientMockRecorder) ListOpenWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenWorkflow", reflect.TypeOf((*MockClient)(nil).ListOpenWorkflow), arg0, arg1)
}

// ListWorkflow mocks base method
func (m *MockClient) ListWorkflow(arg0 context.Context, arg1 *shared.ListWorkflowExecutionsRequest) (*shared.ListWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.ListWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflow indicates an expected call of ListWorkflow
func (mr *MockClientMockRecorder) ListWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflow", reflect.TypeOf((*MockClient)(nil).ListWorkflow), arg0, arg1)
}

// QueryWorkflow mocks base method
func (m *MockClient) QueryWorkflow(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...interface{}) (internal.Value, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryWorkflow", varargs...)
	ret0, _ := ret[0].(internal.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWorkflow indicates an expected call of QueryWorkflow
func (mr *MockClientMockRecorder) QueryWorkflow(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWorkflow", reflect.TypeOf((*MockClient)(nil).QueryWorkflow), varargs...)
}

// QueryWorkflowWithOptions mocks base method
func (m *MockClient) QueryWorkflowWithOptions(arg0 context.Context, arg1 *internal.QueryWorkflowWithOptionsRequest) (*internal.QueryWorkflowWithOptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWorkflowWithOptions", arg0, arg1)
	ret0, _ := ret[0].(*internal.QueryWorkflowWithOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWorkflowWithOptions indicates an expected call of QueryWorkflowWithOptions
func (mr *MockClientMockRecorder) QueryWorkflowWithOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWorkflowWithOptions", reflect.TypeOf((*MockClient)(nil).QueryWorkflowWithOptions), arg0, arg1)
}

// RecordActivityHeartbeat mocks base method
func (m *MockClient) RecordActivityHeartbeat(arg0 context.Context, arg1 []byte, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecordActivityHeartbeat", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordActivityHeartbeat indicates an expected call of RecordActivityHeartbeat
func (mr *MockClientMockRecorder) RecordActivityHeartbeat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordActivityHeartbeat", reflect.TypeOf((*MockClient)(nil).RecordActivityHeartbeat), varargs...)
}

// RecordActivityHeartbeatByID mocks base method
func (m *MockClient) RecordActivityHeartbeatByID(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecordActivityHeartbeatByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordActivityHeartbeatByID indicates an expected call of RecordActivityHeartbeatByID
func (mr *MockClientMockRecorder) RecordActivityHeartbeatByID(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordActivityHeartbeatByID", reflect.TypeOf((*MockClient)(nil).RecordActivityHeartbeatByID), varargs...)
}

// ScanWorkflow mocks base method
func (m *MockClient) ScanWorkflow(arg0 context.Context, arg1 *shared.ListWorkflowExecutionsRequest) (*shared.ListWorkflowExecutionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*shared.ListWorkflowExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanWorkflow indicates an expected call of ScanWorkflow
func (mr *MockClientMockRecorder) ScanWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanWorkflow", reflect.TypeOf((*MockClient)(nil).ScanWorkflow), arg0, arg1)
}

// SignalWithStartWorkflow mocks base method
func (m *MockClient) SignalWithStartWorkflow(arg0 context.Context, arg1, arg2 string, arg3 interface{}, arg4 internal.StartWorkflowOptions, arg5 interface{}, arg6 ...interface{}) (*internal.WorkflowExecution, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignalWithStartWorkflow", varargs...)
	ret0, _ := ret[0].(*internal.WorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalWithStartWorkflow indicates an expected call of SignalWithStartWorkflow
func (mr *MockClientMockRecorder) SignalWithStartWorkflow(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWithStartWorkflow", reflect.TypeOf((*MockClient)(nil).SignalWithStartWorkflow), varargs...)
}

// SignalWorkflow mocks base method
func (m *MockClient) SignalWorkflow(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalWorkflow", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalWorkflow indicates an expected call of SignalWorkflow
func (mr *MockClientMockRecorder) SignalWorkflow(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWorkflow", reflect.TypeOf((*MockClient)(nil).SignalWorkflow), arg0, arg1, arg2, arg3, arg4)
}

// StartWorkflow mocks base method
func (m *MockClient) StartWorkflow(arg0 context.Context, arg1 internal.StartWorkflowOptions, arg2 interface{}, arg3 ...interface{}) (*internal.WorkflowExecution, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWorkflow", varargs...)
	ret0, _ := ret[0].(*internal.WorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflow indicates an expected call of StartWorkflow
func (mr *MockClientMockRecorder) StartWorkflow(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockClient)(nil).StartWorkflow), varargs...)
}

// TerminateWorkflow mocks base method
func (m *MockClient) TerminateWorkflow(arg0 context.Context, arg1, arg2, arg3 string, arg4 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkflow", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateWorkflow indicates an expected call of TerminateWorkflow
func (mr *MockClientMockRecorder) TerminateWorkflow(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkflow", reflect.TypeOf((*MockClient)(nil).TerminateWorkflow), arg0, arg1, arg2, arg3, arg4)
}
