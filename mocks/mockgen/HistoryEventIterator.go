// // Copyright (c) 2017-2020 Uber Technologies Inc.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/cadence/internal (interfaces: HistoryEventIterator)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	gomock "github.com/golang/mock/gomock"
	shared "go.uber.org/cadence/.gen/go/shared"
	reflect "reflect"
)

// MockHistoryEventIterator is a mock of HistoryEventIterator interface
type MockHistoryEventIterator struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryEventIteratorMockRecorder
}

// MockHistoryEventIteratorMockRecorder is the mock recorder for MockHistoryEventIterator
type MockHistoryEventIteratorMockRecorder struct {
	mock *MockHistoryEventIterator
}

// NewMockHistoryEventIterator creates a new mock instance
func NewMockHistoryEventIterator(ctrl *gomock.Controller) *MockHistoryEventIterator {
	mock := &MockHistoryEventIterator{ctrl: ctrl}
	mock.recorder = &MockHistoryEventIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistoryEventIterator) EXPECT() *MockHistoryEventIteratorMockRecorder {
	return m.recorder
}

// HasNext mocks base method
func (m *MockHistoryEventIterator) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext
func (mr *MockHistoryEventIteratorMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockHistoryEventIterator)(nil).HasNext))
}

// Next mocks base method
func (m *MockHistoryEventIterator) Next() (*shared.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*shared.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockHistoryEventIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockHistoryEventIterator)(nil).Next))
}
